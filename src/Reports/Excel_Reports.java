/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Reports;

import Library.*;
import Students.DbConnect;
import java.io.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Start_a_Way
 */
public class Excel_Reports extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    /**
     * Creates new form Library_Excel
     */
    public Excel_Reports() {
        super("Excel_Reports");
        initComponents();
        conn = new DbConnect().DbConnect();
    }

    private static void writeToExcel(ResultSet rs, String fileName) throws SQLException, IOException {
        ResultSetMetaData rsmd = rs.getMetaData();
        List<String> columns = new ArrayList<String>() {
            {
                for (int i = 1; i <= rsmd.getColumnCount();
                        i++) {
                    add(rsmd.getColumnLabel(i));
                }
            }
        };

        XSSFWorkbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet();
        Row header = sheet.createRow(0);
        for (int i = 0; i < columns.size(); i++) {
            header.createCell(i).setCellValue(columns.get(i));
        }
        int rowIndex = 0;
        while (rs.next()) {
            Row row = sheet.createRow(++rowIndex);
            for (int i = 0; i < columns.size(); i++) {
                Cell cell = row.createCell(i);
                String val = Objects.toString(rs.getObject(columns.get(i)), "");
                cell.setCellValue(val);
            }
            try (FileOutputStream fos = new FileOutputStream(fileName)) {
                book.write(fos);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Results = new javax.swing.JPanel();
        genarateReport = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        reportType = new javax.swing.JComboBox<>();
        jYearChooser = new com.toedter.calendar.JYearChooser();
        form = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Results.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 0, 0), new java.awt.Color(51, 0, 0), new java.awt.Color(51, 0, 0), new java.awt.Color(51, 0, 0)), "Exams Excel Reports", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Calibri", 3, 12), new java.awt.Color(0, 0, 204))); // NOI18N

        genarateReport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Excel-2-icon32.png"))); // NOI18N
        genarateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genarateReportActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel8.setText("Generate");

        reportType.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        reportType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Book List", "Borrowing List", "Exams List", "Parents List", "Result List", "Return List", "Staff List", "Student List" }));
        reportType.setSelectedIndex(-1);

        jYearChooser.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N

        form.setFont(new java.awt.Font("Calibri", 1, 12)); // NOI18N
        form.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Form 1", "Form 2", "Form 3", "Form 4" }));

        jLabel1.setFont(new java.awt.Font("Calibri", 3, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("For Exams and Results Choose Class and Year");

        jLabel9.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel9.setText("Class");

        jLabel10.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel10.setText("Year");

        javax.swing.GroupLayout ResultsLayout = new javax.swing.GroupLayout(Results);
        Results.setLayout(ResultsLayout);
        ResultsLayout.setHorizontalGroup(
            ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ResultsLayout.createSequentialGroup()
                .addComponent(reportType, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ResultsLayout.createSequentialGroup()
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ResultsLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(ResultsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(29, 29, 29)
                        .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(form, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(genarateReport, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ResultsLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                .addContainerGap())
        );
        ResultsLayout.setVerticalGroup(
            ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResultsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reportType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(form, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ResultsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(genarateReport, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel2.setFont(new java.awt.Font("Calibri", 3, 18)); // NOI18N
        jLabel2.setText("SCHOOL MANAGER EXCEL REPORTS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Results, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(Results, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(394, 304));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void genarateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genarateReportActionPerformed
        if (conn != null) {
            try {
                if (reportType.getSelectedItem().equals("Student List")) {
                    pstmt = conn.prepareStatement("SELECT `admNo`, `sName`, "
                            + "`otherName`, `Gender`, `Form`, `Stream`, `Kcpe`, "
                            + "`targetKcse`, `Career`, `DOA` FROM `student` ORDER BY `DOA` DESC ");
                    rs = pstmt.executeQuery();
                    writeToExcel(rs, "Student List.xlsx");
                    JOptionPane.showMessageDialog(null, "Student List Generated "
                            + "Successfully", "Written", JOptionPane.INFORMATION_MESSAGE);
                }
                
                else if (reportType.getSelectedItem().equals("Staff List")) {
                    pstmt = conn.prepareStatement("SELECT * FROM `staff`");
                    rs = pstmt.executeQuery();
                    writeToExcel(rs, "Staff List.xlsx");
                    JOptionPane.showMessageDialog(null, "Staff List Generated "
                            + "Successfully", "Written", JOptionPane.INFORMATION_MESSAGE);
                } 
                
                else if (reportType.getSelectedItem().equals("Return List")) {
                    pstmt = conn.prepareStatement("SELECT `admNo`, `Name`, "
                            + "`Form`, `Stream`, `returnDate`, `libraryNumber`, "
                            + "`Title` FROM `return_book` "
                            + "ORDER BY returnDate DESC");
                    rs = pstmt.executeQuery();
                    writeToExcel(rs, "Book Return List.xlsx");
                    JOptionPane.showMessageDialog(null, "Books Returned List Generated "
                            + "Successfully", "Written", JOptionPane.INFORMATION_MESSAGE);

                }
                
                else if (reportType.getSelectedItem().equals("Result List")) {
                    pstmt = conn.prepareStatement("");
                    rs = pstmt.executeQuery();
                    writeToExcel(rs, "Student Result List.xlsx");
                    JOptionPane.showMessageDialog(null, "Student Result List Generated "
                            + "Successfully", "Written", JOptionPane.INFORMATION_MESSAGE);

                }
                
                else if (reportType.getSelectedItem().equals("Parents List")) {
                    pstmt = conn.prepareStatement("SELECT `idNo`, `parentName`"
                            + " `parentPhone`, `parentEmail`, `parentAddress`, "
                            + "`postalCode`, `Town` FROM `parent`");
                    rs = pstmt.executeQuery();
                    writeToExcel(rs, "Parents List.xlsx");
                    JOptionPane.showMessageDialog(null, "Parents List Generated "
                            + "Successfully", "Written", JOptionPane.INFORMATION_MESSAGE);

                }
                
                else if (reportType.getSelectedItem().equals("Exams List")) {
                    pstmt = conn.prepareStatement("SELECT * FROM `examregister`");
                    rs = pstmt.executeQuery();
                    writeToExcel(rs, "Exams Register List.xlsx");
                    JOptionPane.showMessageDialog(null, "Exams Register List Generated "
                            + "Successfully", "Written", JOptionPane.INFORMATION_MESSAGE);

                } 
                
                else if (reportType.getSelectedItem().equals("Borrowing List")) {
                    pstmt = conn.prepareStatement("SELECT `borrowID`, `admNo`, "
                            + "`Name`, `Form`, `Stream`, `borrowedDate`, `libraryNumber`,"
                            + " `Title`, `Year`, `Publisher` FROM `borrow_book`"
                            + "SORDER BY `borrowedDate`");
                    rs = pstmt.executeQuery();
                    writeToExcel(rs, "Library Books Borrowing List.xlsx");
                    JOptionPane.showMessageDialog(null, "Library Borrowing List Generated "
                            + "Successfully", "Written", JOptionPane.INFORMATION_MESSAGE);

                } 
                
                else if (reportType.getSelectedItem().equals("Books List")) {
                    pstmt = conn.prepareStatement("SELECT `libraryNumber`, "
                            + "`ISBN`, `Title`, `Author`, `Genre`,`Subject`, "
                            + "`Volume`, `Edition`, `Year`, `Publisher` FROM `book`");
                    rs = pstmt.executeQuery();
                    writeToExcel(rs, "Library Books Stock List.xlsx");
                    JOptionPane.showMessageDialog(null, "Library Books Stock List Generated "
                            + "Successfully", "Written", JOptionPane.INFORMATION_MESSAGE);

                }
            } catch (SQLException | IOException ex) {
                Logger.getLogger(Library_Reports.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_genarateReportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Excel_Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Excel_Reports().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Results;
    private javax.swing.JComboBox<String> form;
    private javax.swing.JButton genarateReport;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private com.toedter.calendar.JYearChooser jYearChooser;
    private javax.swing.JComboBox<String> reportType;
    // End of variables declaration//GEN-END:variables
}
