/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Library;

import Students.DbConnect;
import java.io.*;
import java.sql.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.jfree.chart.*;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Start_a_Way
 */
public class Library_Reports extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pstmt;

    /**
     * Creates new form Library_Reports
     */
    public Library_Reports() {
        super("Library_Reports");
        initComponents();
        conn = new DbConnect().DbConnect();
    }

    public void borrowed() {
        String sql = "SELECT `admNo`, `Name`, `Form`, `Stream`, `borrowedDate`,"
                + " `libraryNumber`, `Title` FROM `borrow_book`";
        try {
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            reportTable.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void returned() {
        String sql = "SELECT `admNo`, `Name`,`returnDate`, `libraryNumber`, `Title`"
                + " FROM `return_book`";
        try {
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            reportTable.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private static void writeToExcel(ResultSet rs, String fileName) throws SQLException, IOException {
        ResultSetMetaData rsmd = rs.getMetaData();
        List<String> columns = new ArrayList<String>() {
            {
                for (int i = 1; i <= rsmd.getColumnCount();
                        i++) {
                    add(rsmd.getColumnLabel(i));
                }
            }
        };
        
        XSSFWorkbook book = new XSSFWorkbook();
        Sheet sheet = book.createSheet();
        Row header = sheet.createRow(0);
        for (int i = 0; i < columns.size(); i++) {
            header.createCell(i).setCellValue(columns.get(i));
        }
        int rowIndex = 0;
        while (rs.next()) {
            Row row = sheet.createRow(++rowIndex);
            for (int i = 0; i < columns.size(); i++) {
                Cell cell = row.createCell(i);
                String val = Objects.toString(rs.getObject(columns.get(i)), "");
                cell.setCellValue(val);
            }
            try (FileOutputStream fos = new FileOutputStream(fileName)) {
                book.write(fos);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        stock = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        individual = new javax.swing.JComboBox<>();
        borrow = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        individualRecord = new javax.swing.JButton();
        returned = new javax.swing.JButton();
        srch = new javax.swing.JTextField();
        chartData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 2, true), "Generate and Print Library Reports", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 3, 18), new java.awt.Color(0, 153, 51))); // NOI18N

        stock.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        stock.setText("Library Stock");
        stock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/pdf-icon32.png"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(204, 204, 0));
        jLabel1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel1.setText("Individual");

        individual.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        individual.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Book Issued", "Book Returned", "Student Issued", "Student Returned" }));
        individual.setSelectedIndex(-1);

        borrow.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        borrow.setText("Student Borrowing Record");
        borrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Knob-Left-icon32.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Admission No", "Name", "Form", "Stream", "Library No", "Title", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(reportTable);

        individualRecord.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        individualRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/Knob-Search-icon24.png"))); // NOI18N
        individualRecord.setText("Search");
        individualRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                individualRecordActionPerformed(evt);
            }
        });

        returned.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        returned.setText("Student Return Record ");
        returned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnedActionPerformed(evt);
            }
        });

        srch.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        chartData.setText("Chart");
        chartData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(42, 42, 42)
                            .addComponent(individual, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(srch, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27)
                            .addComponent(individualRecord))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 853, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(stock)
                                .addGap(48, 48, 48)
                                .addComponent(borrow)
                                .addGap(72, 72, 72)
                                .addComponent(returned))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(chartData)
                        .addGap(42, 42, 42)
                        .addComponent(jButton2)
                        .addGap(27, 27, 27)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stock)
                    .addComponent(borrow)
                    .addComponent(returned))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(individualRecord)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(individual, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(srch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(chartData)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setSize(new java.awt.Dimension(901, 579));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void borrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowActionPerformed
        borrowed();
        JOptionPane.showMessageDialog(null, "Search Issued records Complete");


    }//GEN-LAST:event_borrowActionPerformed

    private void returnedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnedActionPerformed
        returned();
        JOptionPane.showMessageDialog(null, "Search of returned record complete");
    }//GEN-LAST:event_returnedActionPerformed

    private void stockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockActionPerformed
        String sql = "SELECT `libraryNumber`, `ISBN`, `Title`, `Author`, `Subject`, "
                + "`Volume`, `Edition`, `Year`, `Publisher`, "
                + "`Price` FROM `book` ORDER BY `Subject` DESC";
        try {
            pstmt = conn.prepareStatement(sql);
            rs = pstmt.executeQuery();
            reportTable.setModel(DbUtils.resultSetToTableModel(rs));

            JOptionPane.showMessageDialog(null, "These are the books the library has",
                    "Stock", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_stockActionPerformed

    private void individualRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_individualRecordActionPerformed
        if (individual.getSelectedItem().equals("Student Returned") && !srch.getText().isEmpty()) {

            String sql = "SELECT `admNo`, `Name`, `borrowedDate`, `returnDate`,"
                    + " `libraryNumber`,`Title` FROM `return_book` WHERE `admNo`=?";
            try {
                pstmt = conn.prepareStatement(sql);
                pstmt.setString(1, srch.getText());
                rs = pstmt.executeQuery();
                if (rs.next()) {
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                    JOptionPane.showMessageDialog(null, "Search Individual Student Returned Record complete",
                            "Individual Student", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Student Returned Not Found",
                            "Not Found", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException ex) {
                Logger.getLogger(Library_Reports.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else if (individual.getSelectedItem().equals("Book Returned") && !srch.getText().isEmpty()) {

            String sql1 = "SELECT `admNo`, `returnDate`, `libraryNumber`,`Title` "
                    + "FROM `return_book` WHERE `libraryNumber`=?";
            try {
                pstmt = conn.prepareStatement(sql1);
                pstmt.setString(1, srch.getText());
                rs = pstmt.executeQuery();

                if (rs.next()) {
                    reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                    JOptionPane.showMessageDialog(null, "Search Individual Book Returned Record Complete",
                            "Individual Book", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Book Returned Not Found",
                            "Not Found", JOptionPane.ERROR_MESSAGE);
                }

            } catch (SQLException ex) {
                Logger.getLogger(Library_Reports.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (individual.getSelectedItem().equals("Student Issued") && !srch.getText().isEmpty()) {

            String sql1 = "SELECT `admNo`, `Name`, `borrowedDate`, "
                    + "`libraryNumber`,`Title`, `Publisher`"
                    + " FROM `borrow_book` WHERE `admNo`=? ";
            try {
                pstmt = conn.prepareStatement(sql1);
                pstmt.setString(1, srch.getText());
                rs = pstmt.executeQuery();

                reportTable.setModel(DbUtils.resultSetToTableModel(rs));
                JOptionPane.showMessageDialog(null, "Search Individual Student Issued Record Complete",
                        "Student Issued", JOptionPane.INFORMATION_MESSAGE);

            } catch (SQLException ex) {
                Logger.getLogger(Library_Reports.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (individual.getSelectedItem().equals("Book Issued") && !srch.getText().isEmpty()) {

            String sql2 = "SELECT `admNo`, `Form`, `Stream`, `borrowedDate`,"
                    + " `libraryNumber`, `Title`,`Publisher` FROM `borrow_book` "
                    + "WHERE `libraryNumber`=? ORDER BY `libraryNumber` ASC, `Form` ASC";
            try {
                pstmt = conn.prepareStatement(sql2);
                pstmt.setString(1, srch.getText());
                rs = pstmt.executeQuery();
                reportTable.setModel(DbUtils.resultSetToTableModel(rs));

                JOptionPane.showMessageDialog(null, "Search Individual Book Issued Record Complete",
                        "Book Issued", JOptionPane.INFORMATION_MESSAGE);

            } catch (SQLException ex) {
                Logger.getLogger(Library_Reports.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Blank Fields, Search failure",
                    "Blanks", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_individualRecordActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        setVisible(false);
        Llibrary_Home hl = new Llibrary_Home();
        hl.setVisible(true);
        hl.pack();
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void chartDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chartDataActionPerformed
        DefaultPieDataset dataSet = new DefaultPieDataset();
        dataSet.setValue("One", new Integer(10));
        dataSet.setValue("Two", new Integer(20));
        dataSet.setValue("Three", new Integer(30));
        dataSet.setValue("Four", new Integer(40));
        JFreeChart chart = ChartFactory.createPieChart("Pie Chart", dataSet, true, true, true);

        PiePlot P = (PiePlot) chart.getPlot();
        //P.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame = new ChartFrame("Pie Chart", chart);
        frame.setVisible(true);
        frame.setSize(450, 500);


    }//GEN-LAST:event_chartDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel("com.jtattoo.plaf.acryl.AcrylLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Library_Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Library_Reports().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton borrow;
    private javax.swing.JButton chartData;
    private javax.swing.JComboBox<String> individual;
    private javax.swing.JButton individualRecord;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable reportTable;
    private javax.swing.JButton returned;
    private javax.swing.JTextField srch;
    private javax.swing.JButton stock;
    // End of variables declaration//GEN-END:variables

    private boolean isInteger(String input) {
        boolean isValidInteger = false;
        try {
            Integer.parseInt(input);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Is no valid admission number");
        }
        return isValidInteger;
    }

}
